{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data preparation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Merging download data from Scopus"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The bibliographic data is divided in two files. The first file (`demo-citations.csv` in this example) contains the bibliographic information about documents captured automaticly using the search string in Scopus. The second file (`demo-abstracts.csv`) contains the fields `Author Keywords` and `Abstract` for all records in the file `demo-citations.csv`. Both files contains the documents in the same order, such that, they can be merged row by row. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "citations = pd.read_csv('demo-citations.csv')\n",
    "abstracts = pd.read_csv('demo-abstracts.csv')\n",
    "abstracts = abstracts[['Abstract', 'Author Keywords']]\n",
    "full = pd.concat([citations, abstracts], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the next code fragment, the column `'selected'` is created and the order of columns in the dataframe is modified. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "full['selected'] = [False] * len(full)\n",
    "\n",
    "full = full[['selected', 'Year', 'Title', 'Authors', 'Author(s) ID', 'Source title', 'Volume',\n",
    "       'Issue', 'Art. No.', 'Page start', 'Page end', 'Page count', 'Cited by',\n",
    "       'DOI', 'Affiliations', 'Authors with affiliations', 'Document Type',\n",
    "       'Publication Stage', 'Source', 'EID', 'Abstract', 'Author Keywords']]\n",
    "\n",
    "full = full.sort_values(by=['selected','Year', 'Title'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data exportation for manual review"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The dataframe is exported in json format. This file is usually edited by the analyst by applying inclusion and exclusion criteria."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "full.to_json('demo-automatic.json', orient='records', lines=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Filtering of selected records"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We recommend to modify a copy of the file in the previous step. Now, the reviewed file is readed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "records = pd.read_json('demo-manual.json', orient='records', lines=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this fragment of code, a filter is applied for obtaining only the selected records."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "records = records[records.selected == True]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Removing of duplicated records"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Records with the same title are removed. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "from techMiner import removeDuplicateRecords\n",
    "\n",
    "records = removeDuplicateRecords(records, fields='Title', matchType='fingerprint')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Column edition"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since the bibliographical information is stored as a pandas.DataFrame, the user can apply common techniques for selecting, sorting and modifying the dataframe."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Information exported by Scopus need to be modifyed: first, zero citations are coded as NaN, and must be replaced by zero. Second, several lists end with a ';' that must be deleted."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "records['Cited by'] = records['Cited by'].map(lambda x: 0 if np.isnan(x) else x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "records['Author Keywords'] = records['Author Keywords'].map(lambda x: x[:-1] if isinstance(x, str) and x[-1] == ';' else x)\n",
    "records['Author(s) ID'] = records['Author(s) ID'].map(lambda x: x[:-1] if isinstance(x, str) and x[-1] == ';' else x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Keywords review"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this step, the column `'Author Keywords'` is review and edited. The aim of this step is to unify strings refering to the same concept. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "## A dictionary of possible matches is created\n",
    "from techMiner.lists import makeCleanupDict\n",
    "d = makeCleanupDict(records['Author Keywords'], sep=';')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The dictionary is printed in json format for manual editing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\n",
      "  \"Algorithmic trading\": [\n",
      "    \"Algorithmic Trading\",\n",
      "    \"Algorithmic trading\",\n",
      "    \"algorithmic trading\"\n",
      "  ],\n",
      "  \"Algorithmic trading systems\": [\n",
      "    \"Algorithmic Trading Systems\",\n",
      "    \"Algorithmic trading system\",\n",
      "    \"Algorithmic trading systems\"\n",
      "  ],\n",
      "  \"Algorithmic trading, trading strategy\": [\n",
      "    \"Algorithmic trading strategy\",\n",
      "    \"Algorithmic trading, trading strategy\"\n",
      "  ],\n",
      "  \"Artificial intelligence\": [\n",
      "    \"Artificial Intelligence\",\n",
      "    \"Artificial intelligence\"\n",
      "  ],\n",
      "  \"Artificial neural networks\": [\n",
      "    \"Artificial Neural Networks\",\n",
      "    \"Artificial neural network\",\n",
      "    \"Artificial neural networks\"\n",
      "  ],\n",
      "  \"Automated trading\": [\n",
      "    \"Automated Trading\",\n",
      "    \"Automated trading\",\n",
      "    \"automated trading\"\n",
      "  ],\n",
      "  \"Automated trading system\": [\n",
      "    \"Automated trading system\",\n",
      "    \"Automated trading systems\",\n",
      "    \"automated trading system\"\n",
      "  ],\n",
      "  \"Big data\": [\n",
      "    \"Big Data\",\n",
      "    \"Big data\"\n",
      "  ],\n",
      "  \"Data mining\": [\n",
      "    \"Data Mining\",\n",
      "    \"Data mining\"\n",
      "  ],\n",
      "  \"Decision support system\": [\n",
      "    \"Decision support system\",\n",
      "    \"decision support systems\"\n",
      "  ],\n",
      "  \"Deep learning\": [\n",
      "    \"Deep Learning\",\n",
      "    \"Deep learning\"\n",
      "  ],\n",
      "  \"Deep neural networks\": [\n",
      "    \"Deep Neural Networks\",\n",
      "    \"Deep neural networks\"\n",
      "  ],\n",
      "  \"Efficient market hypothesis\": [\n",
      "    \"Efficient Market Hypothesis\",\n",
      "    \"Efficient market hypothesis\"\n",
      "  ],\n",
      "  \"Financial Markets\": [\n",
      "    \"Financial Markets\",\n",
      "    \"Financial market\"\n",
      "  ],\n",
      "  \"Financial forecasting\": [\n",
      "    \"Financial forecasting\",\n",
      "    \"financial forecasting\"\n",
      "  ],\n",
      "  \"Genetic algorithm\": [\n",
      "    \"Genetic algorithm\",\n",
      "    \"Genetic algorithms\"\n",
      "  ],\n",
      "  \"High frequency trading\": [\n",
      "    \"High Frequency Trading\",\n",
      "    \"High frequency trading\",\n",
      "    \"high frequency trading\"\n",
      "  ],\n",
      "  \"High-frequency trading\": [\n",
      "    \"High-frequency trading\",\n",
      "    \"high-frequency trading\"\n",
      "  ],\n",
      "  \"Holonic systems\": [\n",
      "    \"Holonic Systems\",\n",
      "    \"Holonic systems\"\n",
      "  ],\n",
      "  \"Intelligent agents\": [\n",
      "    \"Intelligent Agents\",\n",
      "    \"Intelligent agents\"\n",
      "  ],\n",
      "  \"Limit order book\": [\n",
      "    \"Limit order book\",\n",
      "    \"limit order book\"\n",
      "  ],\n",
      "  \"Machine learning\": [\n",
      "    \"Machine Learning\",\n",
      "    \"Machine learning\",\n",
      "    \"machine learning\"\n",
      "  ],\n",
      "  \"Portfolio optimization\": [\n",
      "    \"Portfolio optimization\",\n",
      "    \"portfolio optimization\"\n",
      "  ],\n",
      "  \"Random forests\": [\n",
      "    \"Random forest\",\n",
      "    \"Random forests\"\n",
      "  ],\n",
      "  \"Recurrent neural networks\": [\n",
      "    \"Recurrent neural network\",\n",
      "    \"Recurrent neural networks\"\n",
      "  ],\n",
      "  \"Sentiment analysis\": [\n",
      "    \"Sentiment Analysis\",\n",
      "    \"Sentiment analysis\"\n",
      "  ],\n",
      "  \"Stock market\": [\n",
      "    \"Stock Markets\",\n",
      "    \"Stock market\"\n",
      "  ],\n",
      "  \"Technical analysis\": [\n",
      "    \"Technical Analysis\",\n",
      "    \"Technical analysis\",\n",
      "    \"technical analysis\"\n",
      "  ],\n",
      "  \"Trading strategy\": [\n",
      "    \"Trading strategies\",\n",
      "    \"Trading strategy\"\n",
      "  ],\n",
      "  \"agent-based modeling\": [\n",
      "    \"Agent-based modeling\",\n",
      "    \"agent-based model\",\n",
      "    \"agent-based modeling\"\n",
      "  ],\n",
      "  \"classification\": [\n",
      "    \"Classification\",\n",
      "    \"classification\"\n",
      "  ],\n",
      "  \"complex event processing\": [\n",
      "    \"Complex event processing\",\n",
      "    \"complex event processing\"\n",
      "  ],\n",
      "  \"complexity\": [\n",
      "    \"Complexity\",\n",
      "    \"complexity\"\n",
      "  ],\n",
      "  \"convolutional neural networks\": [\n",
      "    \"Convolutional neural network\",\n",
      "    \"Convolutional neural networks\",\n",
      "    \"convolutional neural networks\"\n",
      "  ],\n",
      "  \"cryptocurrency\": [\n",
      "    \"Cryptocurrency\",\n",
      "    \"cryptocurrency\"\n",
      "  ],\n",
      "  \"directional change\": [\n",
      "    \"Directional changes\",\n",
      "    \"directional change\"\n",
      "  ],\n",
      "  \"e-Finance\": [\n",
      "    \"E-finance\",\n",
      "    \"e-Finance\"\n",
      "  ],\n",
      "  \"multiagent systems\": [\n",
      "    \"Multi-agent systems\",\n",
      "    \"MultiAgent Systems\",\n",
      "    \"Multiagent systems\",\n",
      "    \"multiagent systems\"\n",
      "  ],\n",
      "  \"neural network\": [\n",
      "    \"Neural network\",\n",
      "    \"Neural networks\",\n",
      "    \"neural network\"\n",
      "  ],\n",
      "  \"pattern recognition\": [\n",
      "    \"Pattern recognition\",\n",
      "    \"pattern recognition\"\n",
      "  ],\n",
      "  \"portfolio management\": [\n",
      "    \"Portfolio management\",\n",
      "    \"portfolio management\"\n",
      "  ],\n",
      "  \"quantitative finance\": [\n",
      "    \"Quantitative finance\",\n",
      "    \"quantitative finance\"\n",
      "  ],\n",
      "  \"regularization\": [\n",
      "    \"Regularization\",\n",
      "    \"regularization\"\n",
      "  ],\n",
      "  \"sample size\": [\n",
      "    \"Sample size\",\n",
      "    \"sample size\"\n",
      "  ],\n",
      "  \"simulation\": [\n",
      "    \"Simulation\",\n",
      "    \"simulation\"\n",
      "  ],\n",
      "  \"stock price\": [\n",
      "    \"Stock price\",\n",
      "    \"stock price\"\n",
      "  ],\n",
      "  \"technical indicators\": [\n",
      "    \"Technical Indicators\",\n",
      "    \"Technical indicators\",\n",
      "    \"technical indicators\"\n",
      "  ],\n",
      "  \"trading\": [\n",
      "    \"Trading\",\n",
      "    \"trading\"\n",
      "  ]\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "import json\n",
    "print(json.dumps(d, indent=2, sort_keys=True))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Previous output was copyed and edited directly from cell output."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = '''\n",
    "{\n",
    "  \"Algorithmic trading\": [\n",
    "    \"Algorithmic Trading\",\n",
    "    \"Algorithmic trading\",\n",
    "    \"algorithmic trading\"\n",
    "  ],\n",
    "  \"Algorithmic trading systems\": [\n",
    "    \"Algorithmic Trading Systems\",\n",
    "    \"Algorithmic trading system\",\n",
    "    \"Algorithmic trading systems\"\n",
    "  ],\n",
    "  \"Algorithmic trading, trading strategy\": [\n",
    "    \"Algorithmic trading strategy\",\n",
    "    \"Algorithmic trading, trading strategy\"\n",
    "  ],\n",
    "  \"Artificial intelligence\": [\n",
    "    \"Artificial Intelligence\",\n",
    "    \"Artificial intelligence\"\n",
    "  ],\n",
    "  \"Artificial neural networks\": [\n",
    "    \"Artificial Neural Networks\",\n",
    "    \"Artificial neural network\",\n",
    "    \"Artificial neural networks\"\n",
    "  ],\n",
    "  \"Automated trading\": [\n",
    "    \"Automated Trading\",\n",
    "    \"Automated trading\",\n",
    "    \"automated trading\"\n",
    "  ],\n",
    "  \"Automated trading system\": [\n",
    "    \"Automated trading system\",\n",
    "    \"Automated trading systems\",\n",
    "    \"automated trading system\"\n",
    "  ],\n",
    "  \"Big data\": [\n",
    "    \"Big Data\",\n",
    "    \"Big data\"\n",
    "  ],\n",
    "  \"Data mining\": [\n",
    "    \"Data Mining\",\n",
    "    \"Data mining\"\n",
    "  ],\n",
    "  \"Decision support system\": [\n",
    "    \"Decision support system\",\n",
    "    \"decision support systems\"\n",
    "  ],\n",
    "  \"Deep learning\": [\n",
    "    \"Deep Learning\",\n",
    "    \"Deep learning\",\n",
    "    \"Deep Neural Networks\",\n",
    "    \"Deep neural networks\"\n",
    "  ],\n",
    "  \"Efficient market hypothesis\": [\n",
    "    \"Efficient Market Hypothesis\",\n",
    "    \"Efficient market hypothesis\"\n",
    "  ],\n",
    "  \"Financial Markets\": [\n",
    "    \"Financial Markets\",\n",
    "    \"Financial market\"\n",
    "  ],\n",
    "  \"Financial forecasting\": [\n",
    "    \"Financial forecasting\",\n",
    "    \"financial forecasting\"\n",
    "  ],\n",
    "  \"Genetic algorithm\": [\n",
    "    \"Genetic algorithm\",\n",
    "    \"Genetic algorithms\"\n",
    "  ],\n",
    "  \"High frequency trading\": [\n",
    "    \"High Frequency Trading\",\n",
    "    \"High frequency trading\",\n",
    "    \"high frequency trading\",\n",
    "    \"High-frequency trading\",\n",
    "    \"high-frequency trading\"\n",
    "  ],\n",
    "  \"Holonic systems\": [\n",
    "    \"Holonic Systems\",\n",
    "    \"Holonic systems\"\n",
    "  ],\n",
    "  \"Intelligent agents\": [\n",
    "    \"Intelligent Agents\",\n",
    "    \"Intelligent agents\"\n",
    "  ],\n",
    "  \"Limit order book\": [\n",
    "    \"Limit order book\",\n",
    "    \"limit order book\"\n",
    "  ],\n",
    "  \"Machine learning\": [\n",
    "    \"Machine Learning\",\n",
    "    \"Machine learning\",\n",
    "    \"machine learning\"\n",
    "  ],\n",
    "  \"Portfolio optimization\": [\n",
    "    \"Portfolio optimization\",\n",
    "    \"portfolio optimization\"\n",
    "  ],\n",
    "  \"Random forests\": [\n",
    "    \"Random forest\",\n",
    "    \"Random forests\"\n",
    "  ],\n",
    "  \"Recurrent neural networks\": [\n",
    "    \"Recurrent neural network\",\n",
    "    \"Recurrent neural networks\"\n",
    "  ],\n",
    "  \"Sentiment analysis\": [\n",
    "    \"Sentiment Analysis\",\n",
    "    \"Sentiment analysis\"\n",
    "  ],\n",
    "  \"Stock market\": [\n",
    "    \"Stock Markets\",\n",
    "    \"Stock market\"\n",
    "  ],\n",
    "  \"Technical analysis\": [\n",
    "    \"Technical Analysis\",\n",
    "    \"Technical analysis\",\n",
    "    \"technical analysis\"\n",
    "  ],\n",
    "  \"Trading strategy\": [\n",
    "    \"Trading strategies\",\n",
    "    \"Trading strategy\"\n",
    "  ],\n",
    "  \"agent-based modeling\": [\n",
    "    \"Agent-based modeling\",\n",
    "    \"agent-based model\",\n",
    "    \"agent-based modeling\"\n",
    "  ],\n",
    "  \"classification\": [\n",
    "    \"Classification\",\n",
    "    \"classification\"\n",
    "  ],\n",
    "  \"complex event processing\": [\n",
    "    \"Complex event processing\",\n",
    "    \"complex event processing\"\n",
    "  ],\n",
    "  \"complexity\": [\n",
    "    \"Complexity\",\n",
    "    \"complexity\"\n",
    "  ],\n",
    "  \"convolutional neural networks\": [\n",
    "    \"Convolutional neural network\",\n",
    "    \"Convolutional neural networks\",\n",
    "    \"convolutional neural networks\"\n",
    "  ],\n",
    "  \"cryptocurrency\": [\n",
    "    \"Cryptocurrency\",\n",
    "    \"cryptocurrency\"\n",
    "  ],\n",
    "  \"directional change\": [\n",
    "    \"Directional changes\",\n",
    "    \"directional change\"\n",
    "  ],\n",
    "  \"e-Finance\": [\n",
    "    \"E-finance\",\n",
    "    \"e-Finance\"\n",
    "  ],\n",
    "  \"multiagent systems\": [\n",
    "    \"Multi-agent systems\",\n",
    "    \"MultiAgent Systems\",\n",
    "    \"Multiagent systems\",\n",
    "    \"multiagent systems\"\n",
    "  ],\n",
    "  \"neural network\": [\n",
    "    \"Neural network\",\n",
    "    \"Neural networks\",\n",
    "    \"neural network\"\n",
    "  ],\n",
    "  \"pattern recognition\": [\n",
    "    \"Pattern recognition\",\n",
    "    \"pattern recognition\"\n",
    "  ],\n",
    "  \"portfolio management\": [\n",
    "    \"Portfolio management\",\n",
    "    \"portfolio management\"\n",
    "  ],\n",
    "  \"quantitative finance\": [\n",
    "    \"Quantitative finance\",\n",
    "    \"quantitative finance\"\n",
    "  ],\n",
    "  \"regularization\": [\n",
    "    \"Regularization\",\n",
    "    \"regularization\"\n",
    "  ],\n",
    "  \"sample size\": [\n",
    "    \"Sample size\",\n",
    "    \"sample size\"\n",
    "  ],\n",
    "  \"simulation\": [\n",
    "    \"Simulation\",\n",
    "    \"simulation\"\n",
    "  ],\n",
    "  \"stock price\": [\n",
    "    \"Stock price\",\n",
    "    \"stock price\"\n",
    "  ],\n",
    "  \"technical indicators\": [\n",
    "    \"Technical Indicators\",\n",
    "    \"Technical indicators\",\n",
    "    \"technical indicators\"\n",
    "  ],\n",
    "  \"trading\": [\n",
    "    \"Trading\",\n",
    "    \"trading\"\n",
    "  ]\n",
    "}\n",
    "'''"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the next cell, json is converted to Python object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "d = json.loads(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then, the dictionary is applyed to the list of `Author Keywords` to unify words and phrases."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "from techMiner.lists import applyCleanupDict\n",
    "records['Keywords'] = records['Author Keywords'].map(lambda x: applyCleanupDict(x, d, sep=';')) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6                                                   None\n",
       "8      Decision support system;Intelligent agents;Sec...\n",
       "9      Fibonacci geometry;Price patterns;Technical an...\n",
       "10                                                  None\n",
       "13                                                  None\n",
       "                             ...                        \n",
       "518    Back testing optimization algorithms;d-BackTes...\n",
       "519                                                 None\n",
       "522    Algorithmic trading;Evolutionary algorithms;Mu...\n",
       "523    Algorithmic trading;Financial time series;Inde...\n",
       "524    Algorithmic trading systems;Artificial intelli...\n",
       "Name: Keywords, Length: 156, dtype: object"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "records['Keywords']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "records.to_json('demo-keywords.json', orient='records', lines=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the next part of this tutorial, the most basic analyses are exemplifyed."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
