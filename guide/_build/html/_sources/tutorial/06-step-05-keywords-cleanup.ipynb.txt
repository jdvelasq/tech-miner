{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Step 5: Keywords cleanup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from techminer import RecordsDataFrame\n",
    "\n",
    "rdf = RecordsDataFrame(\n",
    "    pd.read_json(\n",
    "        'step-04.json', \n",
    "        orient='records', \n",
    "        lines=True))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Text clustering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "##\n",
    "## Limpieza de palabras clave\n",
    "##\n",
    "from techminer import Thesaurus, text_clustering\n",
    "th = text_clustering(rdf['keywords'], sep=';')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('thesaurus.txt', 'w') as f:\n",
    "    f.write(th.__repr__())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{\n",
      "  \"Academic research\": [\n",
      "    \"Academic research\",\n",
      "    \"academic research\"\n",
      "  ],\n",
      "  \"Adaptive filters\": [\n",
      "    \"Adaptive filter\",\n",
      "    \"Adaptive filtering\",\n",
      "    \"Adaptive filters\"\n",
      "  ],\n",
      "  \"Adaptive neuro-fuzzy inference system\": [\n",
      "    \"Adaptive Neuro-fuzzy Inference system\",\n",
      "    \"Adaptive neuro-fuzzy inference system\"\n",
      "  ],\n",
      "  \"Agent-based computational economics\": [\n",
      "    \"Agent-based Computational Economics\",\n",
      "    \"Agent-based computational economics\"\n",
      "  ],\n",
      "  \"Agent-based model\": [\n",
      "    \"Agent-based model\",\n"
     ]
    }
   ],
   "source": [
    "!head -n 20 thesaurus.txt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "with open('thesaurus-edited.txt', 'r') as f:\n",
    "    dictionary = json.loads(' '.join(f.readlines()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Keywords cleanup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from techminer import Thesaurus\n",
    "th = Thesaurus(dictionary, ignore_case=False, full_match=True, use_re=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "rdf['keywords (cleaned)'] = rdf['keywords'].map(lambda x: th.apply(x, sep=';'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Deleting based on keywords or other text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-----------------------------------------------\n",
      "Record index: 0\n",
      "{\n",
      "  \"Title\": \"Towards high-capacity fibre-optic communications at the speed of light in vacuum\",\n",
      "  \"keywords (cleaned)\": \"Algorithmic trading;Experimental demonstrations;Fibre-optic communication;Signal transmission;State-of-the-art technology;Transmission bandwidth;Wavelength division multiplexed;Wide bandwidth;Bandwidth;Data communication systems;Fibers;Glass fibers;Light transmission;Light velocity;Optical fibers;Supercomputers;Vacuum;Wave transmission\"\n",
      "}\n",
      "-----------------------------------------------\n",
      "Record index: 1\n",
      "{\n",
      "  \"Title\": \"Low-latency trading\",\n",
      "  \"keywords (cleaned)\": \"High-frequency trading;Limit order markets;Liquidity;Market quality;NASDAQ;Order placement strategies\"\n",
      "}\n",
      "-----------------------------------------------\n",
      "Record index: 2\n",
      "{\n",
      "  \"Title\": \"Rise of the machines: Algorithmic trading in the foreign exchange market\",\n",
      "  \"keywords (cleaned)\": \"Algorithms;Algorithmic trading;r;adverse selection;arbitrage;computers;Costs;edi;Efficiency;foreign exchange;foreign exchange market;High frequency;High frequency data;information;Liquidity;market;Market quality;price discovery;price efficiency;return;speed;strategies;Time series;trading;trading;triangular arbitrage\"\n",
      "}\n",
      "-----------------------------------------------\n",
      "Record index: 3\n",
      "{\n",
      "  \"Title\": \"The high-frequency trading arms race: Frequent batch auctions as a market design response\",\n",
      "  \"keywords (cleaned)\": \"competition (economics);Financial markets;market system;price dynamics;Time series;trading\"\n",
      "}\n",
      "-----------------------------------------------\n",
      "Record index: 4\n",
      "{\n",
      "  \"Title\": \"The diversity of high-frequency traders\",\n",
      "  \"keywords (cleaned)\": \"High-frequency trading;market making;Market quality;volatility\"\n",
      "}\n",
      "-----------------------------------------------\n",
      "Record index: 5\n",
      "{\n",
      "  \"Title\": \"Individual investors and financial disclosure\",\n",
      "  \"keywords (cleaned)\": \"Financial disclosure;Individual characteristics;Individual investors;Information disadvantage\"\n",
      "}\n",
      "-----------------------------------------------\n",
      "Record index: 6\n",
      "{\n",
      "  \"Title\": \"High-frequency financial econometrics\",\n",
      "  \"keywords (cleaned)\": \"High frequency;High-frequency trading;Algorithms;arch;econometrics;Estimation;expo;Financial data;financial econometrics;jump process;market;Market microstructure;Microstructure;microstructure noise;r;research;stock;strategies;trading;trading;Trading strategies;volatility\"\n",
      "}\n",
      "-----------------------------------------------\n",
      "Record index: 7\n",
      "{\n",
      "  \"Title\": \"Design and analysis of a social botnet\",\n",
      "  \"keywords (cleaned)\": \"Social networking (online);Social network security;Commerce;Socialbots;Social engineering;Automated social engineering;Network security;Social network security;On-line social networks;Botnets;Online systems;Online privacy;Behavioral research;Profitability;Social networking (online)\"\n",
      "}\n",
      "-----------------------------------------------\n",
      "Record index: 8\n",
      "{\n",
      "  \"Title\": \"The Flash Crash: High-Frequency Trading in an Electronic Market\",\n",
      "  \"keywords (cleaned)\": \"Electronic market;Flash crash;High frequency;high-frequency traders;High-frequency trading;market;trading;trading;design;edi;Financial markets;Financial markets;Futures;Futures market;index;intraday;prices;r;stock;stock index futures\"\n",
      "}\n",
      "-----------------------------------------------\n",
      "Record index: 9\n",
      "{\n",
      "  \"Title\": \"What's not there: Odd lots and market data\",\n",
      "  \"keywords (cleaned)\": \"Algorithms;edi;gate;High frequency;High-frequency trading;informed traders;informed traders;market;Market data;Order imbalance;price discovery;r;sentiment;stock;trading;trading\"\n",
      "}\n"
     ]
    }
   ],
   "source": [
    "from techminer import display_records\n",
    "\n",
    "display_records(rdf[['Title', 'keywords (cleaned)']].head(10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[\n",
       "  \"Vacuum\",\n",
       "  \"market data\"\n",
       "]\n",
       "ignore_case=True, full_match=False, use_re=False"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from techminer.keywords import Keywords\n",
    "kyw = Keywords()\n",
    "kyw.add_keywords(['Vacuum', 'market data'])\n",
    "kyw"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'vacuum' in kyw"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "idx = rdf['keywords (cleaned)'].map(lambda x: not kyw.common(x, sep=';'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0     False\n",
       "1      True\n",
       "2      True\n",
       "3      True\n",
       "4      True\n",
       "5      True\n",
       "6      True\n",
       "7      True\n",
       "8      True\n",
       "9     False\n",
       "10     True\n",
       "11     True\n",
       "12     True\n",
       "13     True\n",
       "14     True\n",
       "15     True\n",
       "16     True\n",
       "17     True\n",
       "18     True\n",
       "19     True\n",
       "Name: keywords (cleaned), dtype: bool"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "idx[0:20]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Records before =  503\n",
      "Records after =  492\n"
     ]
    }
   ],
   "source": [
    "print('Records before = ', len(rdf))\n",
    "rdf = rdf[idx]\n",
    "print('Records after = ', len(rdf))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "rdf.to_json(\n",
    "    'step-05.json', \n",
    "    orient='records', \n",
    "    lines=True)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
